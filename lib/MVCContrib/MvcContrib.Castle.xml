<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MvcContrib.Castle</name>
    </assembly>
    <members>
        <member name="T:MvcContrib.Castle.MvcTransactionAttribute">
             <summary>
             Indicates the transaction support for a method.
             This attribute is modeled after Castle's ATM:
             http://www.castleproject.org/container/facilities/v1rc3/atm/index.html
             
             Castle ATM used DynamicProxy to wrap the Transaction methods. This causes problems with Parameter Binders because DynamicProxy does
             not copy parameter attributes, a known bug (DYNPROXY-ISSUE-14) currently market as Won't Fix. (10/19/08)
             
             There is no Controller attribute for using the MvcTransactionAttribute, 
             simply mark the methods that you want transactioned with MvcTransaction
             
             [MvcTransaction]
             public void ActionResult AddItem
             {
               //do work
             }
            
             Thrown Exceptions will cause a rollback. At minimum you'll need to configure an ITransactionManager with the ServiceLocator.
             For example with NHibernate and Rhino Tools this would go in your global.aspx.cs:
             
             Container.AddFacility("rhino_transaction", new RhinoTransactionFacility());
             DependencyResolver.InitializeWith(new WindsorDependencyResolver(Container));
             
             </summary>
        </member>
        <member name="M:MvcContrib.Castle.MvcTransactionAttribute.#ctor">
            <summary>
            Declares unspecified values for transaction and isolation, which
            means that the transaction manager will use the default values
            for them
            </summary>
        </member>
        <member name="M:MvcContrib.Castle.MvcTransactionAttribute.#ctor(Castle.Services.Transaction.TransactionMode)">
            <summary>
            Declares the transaction mode, but omits the isolation, 
            which means that the transaction manager should use the
            default value for it.
            </summary>
            <param name="transactionMode"></param>
        </member>
        <member name="M:MvcContrib.Castle.MvcTransactionAttribute.#ctor(Castle.Services.Transaction.TransactionMode,Castle.Services.Transaction.IsolationMode)">
            <summary>
            Declares both the transaction mode and isolation 
            desired for this method. The transaction manager should
            obey the declaration.
            </summary>
            <param name="transactionMode"></param>
            <param name="isolationMode"></param>
        </member>
        <member name="P:MvcContrib.Castle.MvcTransactionAttribute.IsolationMode">
            <summary>
            Returns the <see cref="P:MvcContrib.Castle.MvcTransactionAttribute.IsolationMode"/>
            </summary>
        </member>
        <member name="P:MvcContrib.Castle.MvcTransactionAttribute.TransactionMode">
            <summary>
            Returns the <see cref="P:MvcContrib.Castle.MvcTransactionAttribute.TransactionMode"/>
            </summary>
        </member>
        <member name="P:MvcContrib.Castle.MvcTransactionAttribute.Distributed">
            <summary>
            Gets or sets a value indicating whether the transaction should be distributed.
            </summary>
            <value>
            <c>true</c> if a distributed transaction should be created; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MvcContrib.Castle.WindsorModelBinder">
             <summary>
             An IModelBinder implementation that supports resolving binders via Windsor
             
            Configuration is much the same as the WindsorControllerFactory:
             
             container.Register(AllTypes.Of&lt;IModelBinder&gt;()
            		.FromAssembly(typeof(MyModelBinder).Assembly)
            		.Configure(c => c.LifeStyle.Singleton.Named(c.Implementation.Name.ToLower()))); 
             </summary>
        </member>
        <member name="M:MvcContrib.Castle.WindsorModelBinder.#ctor(Castle.Windsor.IWindsorContainer)">
            <summary>
            Creates a new instance of the WindsorModelBinder using the specified IWindsorContainer instance.
            </summary>
            <param name="container">The Windsor Container to use</param>
        </member>
        <member name="M:MvcContrib.Castle.WindsorModelBinder.#ctor(Castle.Windsor.IWindsorContainer,System.Web.Mvc.IModelBinder)">
            <summary>
            Creates a new instance of the WindsorModelBinder using the specified IWindsorContainer instance and the specified default binder
            </summary>
            <param name="container">The Windsor container to use</param>
            <param name="defaultModelBinder">The default model binder to delegate to (if the binder cannot be found in Windsor)</param>
        </member>
    </members>
</doc>
